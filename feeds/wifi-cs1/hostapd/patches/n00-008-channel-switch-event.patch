Index: hostapd-2021-02-20-59e9794c/src/ap/ubus.c
===================================================================
--- hostapd-2021-02-20-59e9794c.orig/src/ap/ubus.c
+++ hostapd-2021-02-20-59e9794c/src/ap/ubus.c
@@ -766,6 +766,7 @@ enum {
 	CSA_HE,
 	CSA_BLOCK_TX,
 	CSA_FORCE,
+	CSA_REASON,
 	__CSA_MAX
 };
 
@@ -781,6 +782,7 @@ static const struct blobmsg_policy csa_p
 	[CSA_HE] = { "he", BLOBMSG_TYPE_BOOL },
 	[CSA_BLOCK_TX] = { "block_tx", BLOBMSG_TYPE_BOOL },
 	[CSA_FORCE] = { "force", BLOBMSG_TYPE_BOOL },
+	[CSA_REASON] = { "reason", BLOBMSG_TYPE_INT32 },
 };
 
 
@@ -1055,7 +1057,7 @@ void hostapd_dfs_csa_timeout(void *eloop
 		   iface->conf->ieee80211ac, iface->conf->ieee80211ax);
 
 	ret = hostapd_enable_iface(iface);
-	if (ret == 0)
+	if (ret == 0 && css->reason == 0)
 		hostapd_ubus_handle_channel_switch_event(iface,
 						HOSTAPD_UBUS_HIGH_INTERFERENCE,
 						iface->freq);
@@ -1261,6 +1263,7 @@ hostapd_switch_chan(struct ubus_context
 	SET_CSA_SETTING(CSA_VHT, freq_params.vht_enabled, bool);
 	SET_CSA_SETTING(CSA_HE, freq_params.he_enabled, bool);
 	SET_CSA_SETTING(CSA_BLOCK_TX, block_tx, bool);
+	SET_CSA_SETTING(CSA_REASON, reason, u32);
 
 	wpa_printf(MSG_INFO, "%s: CSS freq=%d chan=%d sec_chan_off=%d, width=%d, seg0=%d, seg1=%d", __func__,
 		css.freq_params.freq,
@@ -1284,7 +1287,9 @@ hostapd_switch_chan(struct ubus_context
 			ret = UBUS_STATUS_NOT_SUPPORTED;
 	}
 
-	hostapd_ubus_handle_channel_switch_event(hapd->iface, HOSTAPD_UBUS_HIGH_INTERFERENCE, css.freq_params.freq);
+	if (css.reason == 0) {
+		hostapd_ubus_handle_channel_switch_event(hapd->iface, HOSTAPD_UBUS_HIGH_INTERFERENCE, css.freq_params.freq);
+	}
 
 	if (!ret || !tb[CSA_FORCE] || !blobmsg_get_bool(tb[CSA_FORCE]))
 		return ret;
Index: hostapd-2021-02-20-59e9794c/src/drivers/driver.h
===================================================================
--- hostapd-2021-02-20-59e9794c.orig/src/drivers/driver.h
+++ hostapd-2021-02-20-59e9794c/src/drivers/driver.h
@@ -2464,6 +2464,7 @@ struct beacon_data {
  * @freq_params: Next channel frequency parameter
  * @beacon_csa: Beacon/probe resp/asooc resp info for CSA period
  * @beacon_after: Next beacon/probe resp/asooc resp info
+ * @reason: The reason why we are switching the channel
  * @counter_offset_beacon: Offset to the count field in beacon's tail
  * @counter_offset_presp: Offset to the count field in probe resp.
  */
@@ -2474,6 +2475,7 @@ struct csa_settings {
 	struct hostapd_freq_params freq_params;
 	struct beacon_data beacon_csa;
 	struct beacon_data beacon_after;
+	u32 reason;
 
 	u16 counter_offset_beacon[2];
 	u16 counter_offset_presp[2];
